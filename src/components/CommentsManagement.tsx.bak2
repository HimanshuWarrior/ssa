import React, { useState, useEffect } from 'react';import React, { useState, useEffect } from 'react';

import { MessageSquare, Search, X } from 'lucide-react';import { MessageSquare, Search, X } from 'lucide-react';

import { supabase } from '../lib/supabase';import { supabase } from '../lib/supabase';

import toast from 'react-hot-toast';import toast from 'react-hot-toast';

import StudentComments from './StudentComments';import StudentComments from './StudentComments';

import LoadingSpinner from './ui/LoadingSpinner';import LoadingSpinner from './ui/LoadingSpinner';



interface Student {interface Student {

  id: string;  id: string;

  admission_id: string;  admission_id: string;

  name: string;  name: string;

  class_section: string;  class_section: string;

}}



interface CommentsManagementProps {interface CommentsManagementProps {

  userRole: 'teacher' | 'admin';  userRole: 'teacher' | 'admin';

  userId: string;  userId: string;

  teacherClassSections?: string[];  teacherClassSections?: string[];

}}



const CommentsManagement: React.FC<CommentsManagementProps> = ({const CommentsManagement: React.FC<CommentsManagementProps> = ({

  userRole,  userRole,

  userId,  userId,

  teacherClassSections = []  teacherClassSections = []

}): React.ReactNode => {}) => {

  const [students, setStudents] = useState<Student[]>([]);  const [students, setStudents] = useState<Student[]>([]);

  const [filteredStudents, setFilteredStudents] = useState<Student[]>([]);  const [filteredStudents, setFilteredStudents] = useState<Student[]>([]);

  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);

  const [searchTerm, setSearchTerm] = useState('');  const [searchTerm, setSearchTerm] = useState('');

  const [loading, setLoading] = useState(false);  const [loading, setLoading] = useState(false);

  const [error, setError] = useState<string | null>(null);  const [error, setError] = useState<string | null>(null);



  // Load students only once when component mounts  useEffect(() => {

  useEffect(() => {    let isMounted = true;

    let isMounted = true;

    const fetchStudents = async () => {

    const fetchStudents = async () => {      if (!isMounted) return;

      if (!isMounted) return;      setLoading(true);

      setLoading(true);      setError(null);

      setError(null);      

            try {

      try {        let query = supabase

        let query = supabase          .from('students')

          .from('students')          .select('id, admission_id, name, class_section')

          .select('id, admission_id, name, class_section')          .order('name');

          .order('name');

        if (userRole === 'teacher' && teacherClassSections.length > 0) {

        if (userRole === 'teacher' && teacherClassSections.length > 0) {          query = query.in('class_section', teacherClassSections);

          query = query.in('class_section', teacherClassSections);        }

        }

        const { data, error: supabaseError } = await query;

        const { data, error: supabaseError } = await query;

        if (supabaseError) throw supabaseError;

        if (supabaseError) throw supabaseError;

        if (isMounted) {

        if (isMounted) {          setStudents(data || []);

          setStudents(data || []);          setFilteredStudents(data || []);

          setFilteredStudents(data || []);        }

        }      } catch (err: any) {

      } catch (err: any) {        console.error('Error loading students:', err);

        console.error('Error loading students:', err);        if (isMounted) {

        if (isMounted) {          setError(err.message || 'Failed to load students');

          setError(err.message || 'Failed to load students');          toast.error('Failed to load students');

          toast.error('Failed to load students');        }

        }      } finally {

      } finally {        if (isMounted) {

        if (isMounted) {          setLoading(false);

          setLoading(false);        }

        }      }

      }    };

    };

    fetchStudents();

    fetchStudents();

    return () => {

    return () => {      isMounted = false;

      isMounted = false;    };

    };  }, []); // Empty dependency array - only run once on mount

  }, []); // Empty dependency array - only run once on mount

  useEffect(() => {

  // Filter students when search term changes    if (searchTerm.trim()) {

  useEffect(() => {      const filtered = students.filter(s =>

    if (searchTerm.trim()) {        s.name.toLowerCase().includes(searchTerm.toLowerCase()) ||

      const filtered = students.filter(s =>        s.admission_id.toLowerCase().includes(searchTerm.toLowerCase()) ||

        s.name.toLowerCase().includes(searchTerm.toLowerCase()) ||        s.class_section.toLowerCase().includes(searchTerm.toLowerCase())

        s.admission_id.toLowerCase().includes(searchTerm.toLowerCase()) ||      );

        s.class_section.toLowerCase().includes(searchTerm.toLowerCase())      setFilteredStudents(filtered);

      );    } else {

      setFilteredStudents(filtered);      setFilteredStudents(students);

    } else {    }

      setFilteredStudents(students);  }, [searchTerm, students]);

    }    console.log('Loading students for:', { userRole, userId });

  }, [searchTerm, students]);    setLoading(true);

    try {

  if (loading) {      let query = supabase

    return (        .from('students')

      <div className="flex items-center justify-center py-12">        .select('id, admission_id, name, class_section')

        <LoadingSpinner size="lg" />        .order('name');

        <span className="ml-3 text-gray-600">Loading students...</span>

      </div>      // If teacher, filter by their class sections

    );      if (userRole === 'teacher' && teacherClassSections.length > 0) {

  }        query = query.in('class_section', teacherClassSections);

      }

  if (error) {

    return (      const { data, error } = await query;

      <div className="text-center py-12">

        <p className="text-red-500">{error}</p>      if (error) throw error;

      </div>      setStudents(data || []);

    );      setFilteredStudents(data || []);

  }    } catch (error: any) {

      console.error('Error loading students:', error);

  return (      toast.error('Failed to load students');

    <div className="space-y-6">    } finally {

      <div className="flex items-center justify-between">      setLoading(false);

        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">    }

          <MessageSquare className="w-6 h-6" />  };

          Student Comments

        </h2>  if (loading) {

      </div>    console.log('CommentsManagement is in loading state');

    return (

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">      <div className="flex items-center justify-center py-12">

        {/* Student List */}        <LoadingSpinner size="lg" />

        <div className="lg:col-span-1">        <span className="ml-3 text-gray-600">Loading students...</span>

          <div className="bg-white rounded-xl shadow-lg p-4">      </div>

            <div className="mb-4">    );

              <div className="relative">  }

                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />

                <input  return (

                  type="text"    <div className="space-y-6">

                  placeholder="Search students..."      <div className="flex items-center justify-between">

                  value={searchTerm}        <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">

                  onChange={(e) => setSearchTerm(e.target.value)}          <MessageSquare className="w-6 h-6" />

                  className="w-full pl-10 pr-4 py-2 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"          Student Comments

                />        </h2>

              </div>      </div>

            </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

            <div className="space-y-2 max-h-[600px] overflow-y-auto">        {/* Student List */}

              {filteredStudents.length === 0 ? (        <div className="lg:col-span-1">

                <div className="text-center py-8 text-gray-500">          <div className="bg-white rounded-xl shadow-lg p-4">

                  <p>No students found</p>            <div className="mb-4">

                </div>              <div className="relative">

              ) : (                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />

                filteredStudents.map((student) => (                <input

                  <button                  type="text"

                    key={student.id}                  placeholder="Search students..."

                    onClick={() => setSelectedStudent(student)}                  value={searchTerm}

                    className={`w-full text-left p-3 rounded-lg transition-all ${                  onChange={(e) => setSearchTerm(e.target.value)}

                      selectedStudent?.id === student.id                  className="w-full pl-10 pr-4 py-2 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"

                        ? 'bg-blue-500 text-white shadow-lg'                />

                        : 'bg-gray-50 hover:bg-gray-100 text-gray-900'              </div>

                    }`}            </div>

                  >

                    <div className="font-semibold">{student.name}</div>            <div className="space-y-2 max-h-[600px] overflow-y-auto">

                    <div className={`text-sm ${              {filteredStudents.length === 0 ? (

                      selectedStudent?.id === student.id ? 'text-blue-100' : 'text-gray-500'                <div className="text-center py-8 text-gray-500">

                    }`}>                  <p>No students found</p>

                      {student.admission_id} • {student.class_section}                </div>

                    </div>              ) : (

                  </button>                filteredStudents.map((student) => (

                ))                  <button

              )}                    key={student.id}

            </div>                    onClick={() => setSelectedStudent(student)}

          </div>                    className={`w-full text-left p-3 rounded-lg transition-all ${

        </div>                      selectedStudent?.id === student.id

                        ? 'bg-blue-500 text-white shadow-lg'

        {/* Comments Section */}                        : 'bg-gray-50 hover:bg-gray-100 text-gray-900'

        <div className="lg:col-span-2">                    }`}

          {selectedStudent ? (                  >

            <div className="bg-white rounded-xl shadow-lg p-6">                    <div className="font-semibold">{student.name}</div>

              <div className="flex items-center justify-between mb-6">                    <div className={`text-sm ${

                <div>                      selectedStudent?.id === student.id ? 'text-blue-100' : 'text-gray-500'

                  <h3 className="text-xl font-bold text-gray-900">{selectedStudent.name}</h3>                    }`}>

                  <p className="text-sm text-gray-500">                      {student.admission_id} • {student.class_section}

                    {selectedStudent.admission_id} • {selectedStudent.class_section}                    </div>

                  </p>                  </button>

                </div>                ))

                <button              )}

                  onClick={() => setSelectedStudent(null)}            </div>

                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"          </div>

                >        </div>

                  <X className="w-5 h-5 text-gray-500" />

                </button>        {/* Comments Section */}

              </div>        <div className="lg:col-span-2">

          {selectedStudent ? (

              <StudentComments            <div className="bg-white rounded-xl shadow-lg p-6">

                studentId={selectedStudent.id}              <div className="flex items-center justify-between mb-6">

                viewMode="teacher-admin"                <div>

              />                  <h3 className="text-xl font-bold text-gray-900">{selectedStudent.name}</h3>

            </div>                  <p className="text-sm text-gray-500">

          ) : (                    {selectedStudent.admission_id} • {selectedStudent.class_section}

            <div className="bg-white rounded-xl shadow-lg p-12 text-center">                  </p>

              <MessageSquare className="w-16 h-16 text-gray-300 mx-auto mb-4" />                </div>

              <p className="text-gray-500 text-lg">                <button

                Select a student to view and add comments                  onClick={() => setSelectedStudent(null)}

              </p>                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"

            </div>                >

          )}                  <X className="w-5 h-5 text-gray-500" />

        </div>                </button>

      </div>              </div>

    </div>

  );              <StudentComments

};                studentId={selectedStudent.id}

                viewMode="teacher-admin"

export default CommentsManagement;              />
            </div>
          ) : (
            <div className="bg-white rounded-xl shadow-lg p-12 text-center">
              <MessageSquare className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 text-lg">
                Select a student to view and add comments
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CommentsManagement;
